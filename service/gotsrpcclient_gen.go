// Code generated by gotsrpc https://github.com/foomo/gotsrpc/v2  - DO NOT EDIT.

package service

import (
	go_context "context"
	go_net_http "net/http"

	github_com_foomo_contentserver_mcp_service_vo "github.com/foomo/contentserver-mcp/service/vo"
	gotsrpc "github.com/foomo/gotsrpc/v2"
	pkg_errors "github.com/pkg/errors"
)

type SiteContextServiceGoTSRPCClient interface {
	GetContext(ctx go_context.Context, path string) (retGetContext_0 string, retGetContext_1 error, clientErr error)
}

type HTTPSiteContextServiceGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultSiteContextServiceGoTSRPCClient(url string) *HTTPSiteContextServiceGoTSRPCClient {
	return NewSiteContextServiceGoTSRPCClient(url, "/service/sitecontextprovider")
}

func NewSiteContextServiceGoTSRPCClient(url string, endpoint string) *HTTPSiteContextServiceGoTSRPCClient {
	return NewSiteContextServiceGoTSRPCClientWithClient(url, endpoint, nil)
}

func NewSiteContextServiceGoTSRPCClientWithClient(url string, endpoint string, client *go_net_http.Client) *HTTPSiteContextServiceGoTSRPCClient {
	return &HTTPSiteContextServiceGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}
func (tsc *HTTPSiteContextServiceGoTSRPCClient) GetContext(ctx go_context.Context, path string) (retGetContext_0 string, retGetContext_1 error, clientErr error) {
	args := []interface{}{path}
	reply := []interface{}{&retGetContext_0, &retGetContext_1}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "GetContext", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call service.SiteContextServiceGoTSRPCProxy GetContext")
	}
	return
}

type ServiceGoTSRPCClient interface {
	GetDocument(ctx go_context.Context, path string) (retGetDocument_0 *github_com_foomo_contentserver_mcp_service_vo.Document, retGetDocument_1 error, clientErr error)
}

type HTTPServiceGoTSRPCClient struct {
	URL      string
	EndPoint string
	Client   gotsrpc.Client
}

func NewDefaultServiceGoTSRPCClient(url string) *HTTPServiceGoTSRPCClient {
	return NewServiceGoTSRPCClient(url, "/services/content")
}

func NewServiceGoTSRPCClient(url string, endpoint string) *HTTPServiceGoTSRPCClient {
	return NewServiceGoTSRPCClientWithClient(url, endpoint, nil)
}

func NewServiceGoTSRPCClientWithClient(url string, endpoint string, client *go_net_http.Client) *HTTPServiceGoTSRPCClient {
	return &HTTPServiceGoTSRPCClient{
		URL:      url,
		EndPoint: endpoint,
		Client:   gotsrpc.NewClientWithHttpClient(client),
	}
}
func (tsc *HTTPServiceGoTSRPCClient) GetDocument(ctx go_context.Context, path string) (retGetDocument_0 *github_com_foomo_contentserver_mcp_service_vo.Document, retGetDocument_1 error, clientErr error) {
	args := []interface{}{path}
	reply := []interface{}{&retGetDocument_0, &retGetDocument_1}
	clientErr = tsc.Client.Call(ctx, tsc.URL, tsc.EndPoint, "GetDocument", args, reply)
	if clientErr != nil {
		clientErr = pkg_errors.WithMessage(clientErr, "failed to call service.ServiceGoTSRPCProxy GetDocument")
	}
	return
}
